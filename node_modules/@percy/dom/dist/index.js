(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.PercyDOM = {}));
}(this, (function (exports) { 'use strict';

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;

    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = o[Symbol.iterator]();
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  // Returns a mostly random uid.
  function uid() {
    return "_".concat(Math.random().toString(36).substr(2, 9));
  } // Marks elements that are to be serialized later with a data attribute.


  function prepareDOM(dom) {
    var _iterator = _createForOfIteratorHelper(dom.querySelectorAll('input, textarea, select, iframe, canvas')),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var elem = _step.value;

        if (!elem.getAttribute('data-percy-element-id')) {
          elem.setAttribute('data-percy-element-id', uid());
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  // Translates JavaScript properties of inputs into DOM attributes.
  function serializeInputElements(dom, clone) {
    var _iterator = _createForOfIteratorHelper(dom.querySelectorAll('input, textarea, select')),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var elem = _step.value;
        var inputId = elem.getAttribute('data-percy-element-id');
        var cloneEl = clone.querySelector("[data-percy-element-id=\"".concat(inputId, "\"]"));

        switch (elem.type) {
          case 'checkbox':
          case 'radio':
            if (elem.checked) {
              cloneEl.setAttribute('checked', '');
            }

            break;

          case 'select-one':
            if (elem.selectedIndex !== -1) {
              cloneEl.options[elem.selectedIndex].setAttribute('selected', 'true');
            }

            break;

          case 'select-multiple':
            var _iterator2 = _createForOfIteratorHelper(elem.selectedOptions),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var option = _step2.value;
                cloneEl.options[option.index].setAttribute('selected', 'true');
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            break;

          case 'textarea':
            cloneEl.innerHTML = elem.value;
            break;

          default:
            cloneEl.setAttribute('value', elem.value);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  function serializeFrames(dom, clone, _ref) {
    var enableJavaScript = _ref.enableJavaScript;

    var _iterator = _createForOfIteratorHelper(dom.querySelectorAll('iframe')),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var frame = _step.value;
        var percyElementId = frame.getAttribute('data-percy-element-id');
        var cloneEl = clone.querySelector("[data-percy-element-id=\"".concat(percyElementId, "\"]"));
        var builtWithJs = !frame.srcdoc && (!frame.src || frame.src.split(':')[0] === 'javascript'); // delete frames within the head since they usually break pages when
        // rerendered and do not effect the visuals of a page

        if (clone.head.contains(cloneEl)) {
          cloneEl.remove(); // if the frame document is accessible, we can serialize it
        } else if (frame.contentDocument) {
          // js is enabled and this frame was built with js, don't serialize it
          if (enableJavaScript && builtWithJs) {
            continue;
          } // the frame has yet to load and wasn't built with js, it is unsafe to serialize


          if (!builtWithJs && !frame.contentWindow.performance.timing.loadEventEnd) {
            continue;
          } // recersively serialize contents


          var serialized = serializeDOM({
            dom: frame.contentDocument,
            enableJavaScript: enableJavaScript
          }); // assign to srcdoc and remove src

          cloneEl.setAttribute('srcdoc', serialized);
          cloneEl.removeAttribute('src'); // delete inaccessible frames built with js when js is disabled because they
          // break asset discovery by creating non-captured requests that hang
        } else if (!enableJavaScript && builtWithJs) {
          cloneEl.remove();
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  // Returns true if a stylesheet is a CSSOM-based stylesheet.
  function isCSSOM(styleSheet) {
    var _styleSheet$ownerNode, _styleSheet$ownerNode2;

    // no href, has a rulesheet, and isn't already in the DOM
    return !styleSheet.href && styleSheet.cssRules && !((_styleSheet$ownerNode = styleSheet.ownerNode) !== null && _styleSheet$ownerNode !== void 0 && (_styleSheet$ownerNode2 = _styleSheet$ownerNode.innerText) !== null && _styleSheet$ownerNode2 !== void 0 && _styleSheet$ownerNode2.trim().length);
  } // Outputs in-memory CSSOM into their respective DOM nodes.


  function serializeCSSOM(dom, clone) {
    var _iterator = _createForOfIteratorHelper(dom.styleSheets),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var styleSheet = _step.value;

        if (isCSSOM(styleSheet)) {
          var style = clone.createElement('style');
          style.type = 'text/css';
          style.setAttribute('data-percy-cssom-serialized', 'true');
          style.innerHTML = Array.from(styleSheet.cssRules).reduce(function (prev, cssRule) {
            return prev + cssRule.cssText;
          }, '');
          clone.head.appendChild(style);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  // Serialize in-memory canvas elements into images.
  function serializeCanvas(dom, clone) {
    var _iterator = _createForOfIteratorHelper(dom.querySelectorAll('canvas')),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var canvas = _step.value;
        // Note: the `.toDataURL` API requires WebGL canvas elements to use
        // `preserveDrawingBuffer: true`. This is because `.toDataURL` uses the
        // drawing buffer, which is cleared after each render for WebGL by default.
        var dataUrl = canvas.toDataURL(); // skip empty canvases

        if (!dataUrl || dataUrl === 'data:,') continue; // create an image element in the cloned dom

        var img = clone.createElement('img');
        img.src = dataUrl; // copy canvas element attributes to the image element such as style, class,
        // or data attributes that may be targeted by CSS

        var _iterator2 = _createForOfIteratorHelper(canvas.attributes),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _step2$value = _step2.value,
                name = _step2$value.name,
                value = _step2$value.value;
            img.setAttribute(name, value);
          } // mark the image as serialized (can be targeted by CSS)

        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        img.setAttribute('data-percy-canvas-serialized', ''); // set a default max width to account for canvases that might resize with JS

        img.style.maxWidth = img.style.maxWidth || '100%'; // insert the image into the cloned DOM and remove the cloned canvas element

        var percyElementId = canvas.getAttribute('data-percy-element-id');
        var cloneEl = clone.querySelector("[data-percy-element-id=".concat(percyElementId, "]"));
        cloneEl.parentElement.insertBefore(img, cloneEl);
        cloneEl.remove();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  function doctype(dom) {
    var _dom$doctype;

    var _ref = (_dom$doctype = dom === null || dom === void 0 ? void 0 : dom.doctype) !== null && _dom$doctype !== void 0 ? _dom$doctype : {},
        _ref$name = _ref.name,
        name = _ref$name === void 0 ? 'html' : _ref$name,
        _ref$publicId = _ref.publicId,
        publicId = _ref$publicId === void 0 ? '' : _ref$publicId,
        _ref$systemId = _ref.systemId,
        systemId = _ref$systemId === void 0 ? '' : _ref$systemId;

    var deprecated = '';

    if (publicId && systemId) {
      deprecated = " PUBLIC \"".concat(publicId, "\" \"").concat(systemId, "\"");
    } else if (publicId) {
      deprecated = " PUBLIC \"".concat(publicId, "\"");
    } else if (systemId) {
      deprecated = " SYSTEM \"".concat(systemId, "\"");
    }

    return "<!DOCTYPE ".concat(name).concat(deprecated, ">");
  } // Serializes a document and returns the resulting DOM string.


  function serializeDOM(options) {
    var _ref2 = options || {},
        _ref2$dom = _ref2.dom,
        dom = _ref2$dom === void 0 ? document : _ref2$dom,
        _ref2$enableJavaScrip = _ref2.enableJavaScript,
        enableJavaScript = _ref2$enableJavaScrip === void 0 ? options === null || options === void 0 ? void 0 : options.enable_javascript : _ref2$enableJavaScrip,
        _ref2$domTransformati = _ref2.domTransformation,
        domTransformation = _ref2$domTransformati === void 0 ? options === null || options === void 0 ? void 0 : options.dom_transformation : _ref2$domTransformati;

    prepareDOM(dom);
    var clone = dom.cloneNode(true);
    serializeInputElements(dom, clone);
    serializeFrames(dom, clone, {
      enableJavaScript: enableJavaScript
    });

    if (!enableJavaScript) {
      serializeCSSOM(dom, clone);
      serializeCanvas(dom, clone);
    }

    var doc = clone.documentElement;

    if (domTransformation) {
      try {
        domTransformation(doc);
      } catch (err) {
        console.error('Could not transform the dom:', err.message);
      }
    }

    return doctype(dom) + doc.outerHTML;
  }

  /* istanbul ignore next */
  // works around instances where the context has an incorrect global scope
  // https://github.com/mozilla/geckodriver/issues/1798

  if (globalThis !== window) {
    window.PercyDOM = {
      serialize: serializeDOM
    };
  }

  exports.default = serializeDOM;
  exports.serialize = serializeDOM;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
